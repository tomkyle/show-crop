#!/usr/bin/env bash

# See http://www.exiv2.org/tags-xmp-crs.html

# ======================================
# Runtime Environment
# ======================================

set -o errexit  # Exit if any statement returns a non-true return value.
set -o nounset  # Exit if trying to use an uninitialised variable
set -o pipefail # Pipelines produce failure return code if any command errors.
# set -o xtrace

readonly SCRIPT_NAME=$(basename "${0}")


# --------------------------------------
# Output and formatting stuff
# --------------------------------------

readonly C_RED='\033[0;31m'
readonly C_BLUE='\033[1;34m'
readonly C_ORANGE=$(tput setaf 3)
readonly NC='\033[0m' # No Color


# Error message and error exit, redirecting stdout to stderr
function e_error {
    echo -e >&2 "${C_RED}Error: ${*}${NC}";
    exit 1;
}


function e_warning {
  echo -e "${C_ORANGE}Warning: ${*}${NC}"
}

function e_info {
  echo -e "${C_BLUE}${*}${NC}"
}


# --------------------------------------
# Requirements
# --------------------------------------

# Check if given command is installed, exit otherwise
# Usage: require <command>
function require  {
    command -v "${1}" >/dev/null 2>&1 || e_error "$(printf "Program '%s' required, but it's not installed" "${1}")"
}
require exiftool


# ---------------------------------------
# Useful links
# ---------------------------------------
function showLinkList {
	echo;
	echo "See also:"
	echo "[1] Exiftool: XMP crs Tags"
	echo "    <http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/XMP.html#crs>"
	echo "[2] Exiv2 Metadata reference tables: Camera Raw Schema"
	echo "    <http://www.exiv2.org/tags-xmp-crs.html>"
}


# ---------------------------------------
# Print short help if no arguments
# ---------------------------------------
if [ "$#" -eq 0 ]; then
    printf "Usage: %s <inputfile>\n" "${SCRIPT_NAME}"
	showLinkList
    exit 1
fi


# ---------------------------------------
# main
#
# Usage:
#   main input_file [ input_files ... ]
# ---------------------------------------

function main {

	INPUT_FILES=("${@}")

	for INPUT_FILE in "${INPUT_FILES[@]}"; do
		echo;

        # ---------------------------------------
        # Filename magic
        # ---------------------------------------
        local input_file_extension="${INPUT_FILE##*.}";
        local input_file_basename="${INPUT_FILE%.$input_file_extension}"
        input_file_basename="${input_file_basename##*/}" # remove trailing slash
		local xmp_file="${input_file_basename}.xmp"

		local work_file="${INPUT_FILE}"

		# If there is no CRS-Crop data available,
		# check if there is a XMP sidecar file to work with instead
		HAS_CROP=$(exiftool -s -s -s -HasCrop "${work_file}")
		if [ "${HAS_CROP}" != "True" -a -f "${xmp_file}" ]; then
			e_warning "$(printf "Image '%s' itself has no CRS crop data, use XMP sidecar instead: %s\n" "${work_file}" "${xmp_file}")"
			HAS_CROP=$(exiftool -s -s -s -HasCrop "${xmp_file}")
			work_file="${xmp_file}"
		fi;

		if [ "${HAS_CROP}" != "True" ]; then
			e_warning "$(printf "No CRS crop data available for '%s'.\n" "${work_file}")"
			continue
		fi


        # ---------------------------------------
        # Generate Output
        # ---------------------------------------

		e_info "${work_file}"
		printf "HasCrop: %s\n"    "${HAS_CROP}"
		printf "CropTop: %s\n"    "$(exiftool -s -s -s -CropTop "${work_file}")"
		printf "CropLeft: %s\n"   "$(exiftool -s -s -s -CropLeft "${work_file}")"
		printf "CropBottom: %s\n" "$(exiftool -s -s -s -CropBottom "${work_file}")"
		printf "CropRight: %s\n"  "$(exiftool -s -s -s -CropRight "${work_file}")"
		printf "CropAngle: %s\n"  "$(exiftool -s -s -s -CropAngle "${work_file}")"
		printf "CropWidth: %s\n"  "$(exiftool -s -s -s -CropWidth "${work_file}")"
		printf "CropHeight: %s\n" "$(exiftool -s -s -s -CropHeight "${work_file}")"
		printf "CropUnits: %s\n"  "$(exiftool -s -s -s -CropUnits "${work_file}")"

	done

	showLinkList
}


# ---------------------------------------
# GO!
# ---------------------------------------

main "${@}"
